pipeline {
    agent any

    parameters {
        string(name: 'SERVICE_NAME', defaultValue: 'order-service', description: 'Name of the service to build and deploy')
        string(name: 'ACR_NAME', defaultValue: 'YOUR_ACR_NAME', description: 'Name of the Azure Container Registry')
        string(name: 'APP_SERVICE_NAME', defaultValue: 'YOUR_APP_SERVICE_NAME', description: 'Name of the Azure App Service')
        string(name: 'RESOURCE_GROUP', defaultValue: 'YOUR_RESOURCE_GROUP', description: 'Name of the Azure resource group')
    }

    stages {
        stage('Checkout SCM') {
            steps {
                checkout scm
            }
        }

        stage('Build Docker Image') {
            steps {
                script {
                    // Navigate to the service directory
                    dir("ecom-pulse/${params.SERVICE_NAME}") {
                        sh "docker build -t ${params.ACR_NAME}.azurecr.io/${params.SERVICE_NAME}:${env.BUILD_NUMBER} ."
                    }
                }
            }
        }

        stage('Login to ACR') {
            steps {
                script {
                    // Ensure Azure credentials are configured in Jenkins (e.g., Service Principal)
                    // This assumes you have Azure credentials configured in Jenkins
                    // For example, using 'withAzureCredentials' or 'az acr login' with service principal
                    sh "az acr login --name ${params.ACR_NAME}"
                }
            }
        }

        stage('Push Docker Image to ACR') {
            steps {
                script {
                    sh "docker push ${params.ACR_NAME}.azurecr.io/${params.SERVICE_NAME}:${env.BUILD_NUMBER}"
                }
            }
        }

        stage('Deploy to Azure App Service') {
            steps {
                script {
                    // Deploy the Docker image to Azure App Service
                    // Ensure Azure CLI is installed on the Jenkins agent
                    sh "az webapp config container set --name ${params.APP_SERVICE_NAME} --resource-group ${params.RESOURCE_GROUP} --docker-custom-image-name ${params.ACR_NAME}.azurecr.io/${params.SERVICE_NAME}:${env.BUILD_NUMBER} --docker-registry-server-url https://${params.ACR_NAME}.azurecr.io"
                    sh "az webapp restart --name ${params.APP_SERVICE_NAME} --resource-group ${params.RESOURCE_GROUP}"
                }
            }
        }
    }

    post {
        always {
            cleanWs()
        }
    }
}
