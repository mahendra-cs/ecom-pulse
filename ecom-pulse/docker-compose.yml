version: '3.8'
services:
  order-service:
    build: ./order-service
    ports:
      - "8080:8080"
    networks:
      - ecom-pulse-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/actuator/health"]
      interval: 10s
      timeout: 10s
      retries: 10

  payment-service:
    build: ./payment-service
    ports:
      - "8082:8082"
    networks:
      - ecom-pulse-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8082/actuator/health"]
      interval: 10s
      timeout: 10s
      retries: 10

  inventory-service:
    build: ./inventory-service
    ports:
      - "8081:8081"
    networks:
      - ecom-pulse-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8081/actuator/health"]
      interval: 10s
      timeout: 10s
      retries: 10

  jmeter:
    build: ./jmeter
    volumes:
      - ./jmeter/results:/jmeter/results
    networks:
      - ecom-pulse-network
    depends_on:
      order-service:
        condition: service_healthy
      payment-service:
        condition: service_healthy
      inventory-service:
        condition: service_healthy

  jmeter-starter:
    build: ./jmeter-starter
    ports:
      - "5001:5001"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ./:/app
    working_dir: /app
    networks:
      - ecom-pulse-network
    depends_on:
      - order-service
      - payment-service
      - inventory-service

  prometheus:
    image: prom/prometheus:latest
    volumes:
      - ./prometheus:/etc/prometheus
    command: --config.file=/etc/prometheus/prometheus.yml
    ports:
      - "9090:9090"
    networks:
      - ecom-pulse-network

  grafana:
    image: grafana/grafana:latest
    volumes:
      - ./grafana/provisioning:/etc/grafana/provisioning
    ports:
      - "3000:3000"
    networks:
      - ecom-pulse-network
    depends_on:
      - prometheus

networks:
  ecom-pulse-network:
    driver: bridge